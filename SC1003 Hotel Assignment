#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define Max 5

struct RoomInfo{
    int status; // 0 for empty, 1 for occupied.
    char custname[20];
};

struct RoomInfo RoomID[Max];
int Occupied = 0;
char nullstr[20];
void list();
void assign();
void assignerror();
void removerm();
void removeError();
void findCust();
int main()
{
    int choice =0;

    printf("NTU HOTEL ROOM RESERVATION PROGRAM:\n");
    printf("1: listOccupiedRooms()\n");
    printf("2: assignRoom()\n");
    printf("3: removeRoom()\n");
    printf("4: findCustomer()\n");
    printf("5: quit\n");
    printf("Enter your choice:\n");
    scanf("%d",&choice);

    while(choice != 5)
    {
        switch(choice){
        case 1:
            list();
            break;
        case 2:
            assign();
            break;
        case 3:
            removerm();
            break;
        case 4:
            findCust();
            break;
        }
            printf("Enter your choice:\n");
            scanf("%d",&choice);
    }
    return 0;
}

void list()
{
    int rmID;
    printf("listOccupiedRooms():\n");
    if(Occupied != 0)
    {
        for(rmID =0; rmID <5; rmID++){
            if(RoomID[rmID].status == 1){
                printf("roomID: %d\n", rmID+1);
                printf("customer name: %s\n", RoomID[rmID].custname);
            }
        }}
    else{
        printf("The hotel is empty\n");
    }
}

void assignerror(){
    int rmID;
    char cinp[20], *p;
    scanf("%d",&rmID);
       if(rmID >= 1 && rmID <= Max){
            if(RoomID[rmID-1].status == 0){
                printf("Enter customer name:\n");
                scanf("%c",&cinp);
                fgets(cinp, 20 ,stdin);
                if(p=strchr(cinp,'\n'))
                    *p = '\0';
                strcpy(RoomID[rmID-1].custname,cinp);
                RoomID[rmID-1].status = 1;
                printf("The room has been assigned successfully\n");
                Occupied++;
            }
            else{
                printf("Occupied! Enter another roomID\n");
                printf("Enter a roomID between 1 and %d:\n", Max);
                assignerror();
                }
        }
        else{while(rmID < 1 || rmID > Max){
            printf("Enter a roomID between 1 and %d:\n", Max);
            assignerror();
            break;
            }
            }

    }

void assign(){
    int rmID;
    char cinp[20], *p;
    printf("assignRoom():\n");
    if(Occupied == Max){
           printf("The hotel is full\n");
        }
    else{
        printf("Enter a roomID between 1 and %d:\n",Max);
        scanf("%d", &rmID);
        if(rmID >= 1 && rmID <= Max){
            if(RoomID[rmID-1].status == 0){
                printf("Enter customer name:\n");
                scanf("%c",&cinp);
                fgets(cinp, 20 ,stdin);
                if(p=strchr(cinp,'\n'))
                    *p = '\0';
                strcpy(RoomID[rmID-1].custname,cinp);
                RoomID[rmID-1].status = 1;
                printf("The room has been assigned successfully\n");
                Occupied++;
            }
            else{
                printf("Occupied! Enter another roomID\n");
                printf("Enter a roomID between 1 and %d:\n", Max);
                assignerror();
            }
    }
        else{while(rmID < 1 || rmID > Max){
                printf("Enter a roomID between 1 and %d:\n", Max);
                assignerror();
                break;}
}}}

void removeError(){
    int rmID;
    scanf("%d",&rmID);
        if(rmID >= 1 && rmID <= Max){
            if(RoomID[rmID-1].status == 1){
                RoomID[rmID-1].status = 0;
                strcpy(RoomID[rmID-1].custname, nullstr);
                Occupied --;
                printf("Removal is successful\n");
        }
            else{
                printf("Empty! Enter another roomID for removal.\n");
                printf("Enter a roomID between 1 and %d:\n", Max);
                removeError();
            }
        }
        else{while(rmID < 1 || rmID > Max){
                    printf("Enter a roomID between 1 and %d:\n", Max);
                    removeError();
                    break;}
        }
}

void removerm(){
    int rmID;
    printf("removeRoom():\n");
    if(Occupied == 0){
        printf("All the rooms are empty\n");
    }
    else{
        printf("Enter a roomID between 1 and %d:\n", Max);
        scanf("%d",&rmID);
        if(rmID >= 1 && rmID <= Max){
            if(RoomID[rmID-1].status == 1){
                RoomID[rmID-1].status = 0;
                strcpy(RoomID[rmID-1].custname, nullstr);
                Occupied --;
                printf("Removal is successful\n");
        }
            else{
                printf("Empty! Enter another roomID for removal\n");
                printf("Enter a roomID between 1 and %d:\n", Max);
                removeError();
            }
        }
        else{while(rmID < 1 || rmID > Max){
                    printf("Enter a roomID between 1 and %d:\n", Max);
                    removeError();
                    break;}
        }
    }
}

void findCust()
{
    int rmID;
    int result;
    char cinp[20], *p;
    char lowerin[20];
    char temp[20];
    char lowerinfo[20];
    printf("findCustomer():\n");
    printf("Enter customer name:\n");
    scanf("%c",&cinp);
    fgets(cinp,20,stdin);
    if(p=strchr(cinp,'\n'))
        *p = '\0';
    for(int c=0; c<20;c++)
    {
        lowerin[c] = tolower(cinp[c]);}
    for(rmID = 0; rmID<Max;rmID++)
    {
        for(int d=0;d<20;d++){
            strcpy(temp,RoomID[rmID].custname);
            lowerinfo[d] = tolower(temp[d]);
        }

        result = strcmp(lowerin,lowerinfo);
        if(result == 0)
        {
            printf("The target customer name is found\n");
            printf("roomID: %d\n", rmID+1);
            printf("customer name: %s\n", RoomID[rmID].custname);
            break;
        }
        else if(rmID == Max-1)
            printf("The target customer name is not found\n");

    }

}
	/*end_edit*/
