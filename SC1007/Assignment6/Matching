#include <stdio.h>
#include <stdlib.h>

typedef struct _listnode
{
 int vertex;
 struct _listnode *next;
} ListNode;
typedef ListNode StackNode;

typedef struct _graph{
 int V;
 int E;
 ListNode **list;
}Graph;

typedef ListNode QueueNode;

typedef struct _queue{
 int size;
 QueueNode *head;
 QueueNode *tail;
} Queue;

typedef struct _stack
{
 int size;
 StackNode *head;
} Stack;

void insertAdjVertex(ListNode** AdjList,int vertex);
void removeAdjVertex(ListNode** AdjList,int vertex);
int matching(Graph g);
int DFS(Graph g, int start, int end, int arr[]);

void enqueue(Queue *qPtr, int item);
int dequeue(Queue *qPtr);
int getFront(Queue q);
int isEmptyQueue(Queue q);
void removeAllItemsFromQueue(Queue *qPtr);
void printQ(QueueNode *cur);
//////STACK///////////////////////////////////////////
void push(Stack *sPtr, int vertex);
int pop(Stack *sPtr);
int peek(Stack s);
int isEmptyStack(Stack s);
void removeAllItemsFromStack(Stack *sPtr);
//////////////////////////////////

int main()
{
 int i, PNo, MNo, Pref;
 int Prj, Std, Mtr; //Project, Student and Mentor;
 int maxMatch;
 scanf("%d %d %d", &Std, &Prj, &Mtr);

 int np,nm; //number of projects and number of mentors

 //build graph
 Graph g;
 g.V = 2 +  Prj + 2*Std + Mtr;
 g.list = malloc(g.V*sizeof(ListNode));
 for(i =0;i<g.V;i++){
   g.list[i]=NULL;
 }
 for(i=1;i<=Std;i++){
   scanf("%d %d",&PNo,&MNo);
   insertAdjVertex(&g.list[i], Std+i);
   //Assign Student number to 2nd set
   g.E++;

   for(int j=0;j<PNo;j++){
      scanf("%d", &Pref);//Mapping Proj to Student
      insertAdjVertex(&g.list[2*Std+Pref], i);
      g.E++;
   }
   for(int j=0; j<MNo;j++){// Mapping 2nd set of Student to Mtr
      scanf("%d", &Pref);
      insertAdjVertex(&g.list[Std+i], 2*Std+Prj+Pref);
      g.E++;
   }

 }
 for(int j=0;j<Prj;j++){//Mapping Proj to Source Node
   insertAdjVertex(&g.list[0], 2*Std+j+1);
   g.E++;
 }

 for(int j =0;j<Mtr;j++){//Mapping Mtr to Sink Node
   insertAdjVertex(&g.list[2*Std+Prj+j+1], 2*Std+Prj+Mtr+1);
   g.E++;
 }
/*ListNode* t;//check
	for(i=0;i<g.V;i++){
         printf("%d: ",i);
         t = g.list[i];
         while(t!=NULL){
             printf("%d -> ",t->vertex);
             t = t->next;
         }
         printf("\n");
    }*/

 //Write your code

 //apply Ford Fulkerson algorithm
 // use DFS or BFS to find a path
 maxMatch = matching(g);
 printf("%d\n", maxMatch);
 return 0;
}

int matching(Graph g)
{

 //Write your code
   int arr[1024];
   int i,temp1,temp2,j;
   ListNode *cur;
   for (i=0;i<1024;i++){
      arr[i]=0;
   }
   
   while(DFS(g,1,g.V-1,arr)==1){
      printf("Path \n");
      j=0;
      while(arr[j+1] !=-1){
         temp1=arr[j];
         temp2=arr[j+1];
         insertAdjVertex(&g.list[temp1-1],temp2);
         removeAdjVertex(&g.list[temp2-1],temp1);
         j++;
      }
      for (i=0;i<1024;i++){
         arr[i]=0;
      }
   }
   
   
   i=0;
   cur=g.list[0];
   while(cur!=NULL){
      printf("%d\n",cur->vertex);
      i++;
      cur=cur->next;
   }
   return i;
}

int DFS(Graph g, int start,int end,int arr[]){
   Stack s;
   s.size=0;
   s.head=NULL;
   ListNode *cur;
   int i = 0,temp,index = 0,yet2visit;
   int *visited;
   visited= malloc(sizeof(int)*g.V);
   for (i=0;i<g.V;i++) visited[i]=0;

   push(&s,start);
   visited[start-1]=1;

   while(isEmptyStack(s)==0){
      temp = peek(s);
      cur = g.list[temp-1];
      yet2visit=0;
      while(cur!=NULL){
         if(visited[cur->vertex-1] ==0){
            push(&s,cur->vertex);
            visited[cur->vertex-1]=1;
            yet2visit=1;
            break;
         }
         cur=cur->next;
      }
      if(yet2visit==0){
         printf("%d  %d \n",temp,end);
         if(temp!= end) pop(&s);
         
         else{
            printf("Entered Else");
            while(!isEmptyStack(s)){
               temp=peek(s);
               
               arr[index]=temp;
               index++;
               pop(&s);
            }
            arr[index]=-1;
            printf("%d\n",arr[index]);
            return 1;
         }
      }
   }
   return 0;
}

void removeAdjVertex(ListNode** AdjList,int vertex)
{
 ListNode *temp, *preTemp;
 if(*AdjList != NULL)
 {
    if((*AdjList)->vertex ==vertex){//first node
      temp = *AdjList;
      *AdjList = (*AdjList)->next;
      free(temp);
      return;
    }
    preTemp = *AdjList;
    temp = (*AdjList)->next;
    while(temp!=NULL && temp->vertex != vertex)
    {
      preTemp= temp;
      temp = temp->next;
    }
    preTemp->next = temp->next;
    free(temp);
   }
}

void insertAdjVertex(ListNode** AdjList,int vertex)
{
  ListNode *temp;
  if(*AdjList==NULL)
  {
     *AdjList = (ListNode *)malloc(sizeof(ListNode));
     (*AdjList)->vertex = vertex;
     (*AdjList)->next = NULL;
  }
  else{
     temp = (ListNode *)malloc(sizeof(ListNode));
     temp->vertex = vertex;
     temp->next = *AdjList;
     *AdjList = temp;
  }
}

void enqueue(Queue *qPtr, int vertex) {
  QueueNode *newNode;
  newNode = malloc(sizeof(QueueNode));
  if(newNode==NULL) exit(0);

  newNode->vertex = vertex;
  newNode->next = NULL;

  if(isEmptyQueue(*qPtr))
     qPtr->head=newNode;
  else
     qPtr->tail->next = newNode;

     qPtr->tail = newNode;
     qPtr->size++;
}

int dequeue(Queue *qPtr) {
   if(qPtr==NULL || qPtr->head==NULL){ //Queue is empty or NULL pointer
     return 0;
   }
   else{
     QueueNode *temp = qPtr->head;
     qPtr->head = qPtr->head->next;
     if(qPtr->head == NULL) //Queue is emptied
       qPtr->tail = NULL;

     free(temp);
     qPtr->size--;
     return 1;
}
}

int getFront(Queue q){
    return q.head->vertex;
}

int isEmptyQueue(Queue q) {
   if(q.size==0) return 1;
   else return 0;
}

void removeAllItemsFromQueue(Queue *qPtr)
{
  while(dequeue(qPtr));
}

void printQ(QueueNode *cur){
 if(cur==NULL) printf("Empty");

 while (cur != NULL){
    printf("%d ", cur->vertex);
    cur = cur->next;
  }
 printf("\n");
}

void push(Stack *sPtr, int vertex)
{
  StackNode *newNode;
  newNode= malloc(sizeof(StackNode));
  newNode->vertex = vertex;
  newNode->next = sPtr->head;
  sPtr->head = newNode;
  sPtr->size++;
}

int pop(Stack *sPtr)
{
  if(sPtr==NULL || sPtr->head==NULL){
     return 0;
  }
  else{
     StackNode *temp = sPtr->head;
     sPtr->head = sPtr->head->next;
     free(temp);
     sPtr->size--;
     return 1;
   }
}

int isEmptyStack(Stack s)
{
    if(s.size==0) return 1;
    else return 0;
}

int peek(Stack s){
   return s.head->vertex;
}

void removeAllItemsFromStack(Stack *sPtr)
{
   while(pop(sPtr));
}
