#include <stdio.h>
#include <stdlib.h>

#define TABLESIZE 37
#define PRIME     13

enum Marker {EMPTY,USED,DELETED};

typedef struct _slot{
    int key;
    enum Marker indicator;
} HashSlot;

int HashInsert(int key, HashSlot hashTable[]);
int HashDelete(int key, HashSlot hashTable[]);


int hash1(int key);
int hash2(int key);

int main()
{
    int opt;
    int i;
    int key;
    int comparison;
    HashSlot hashTable[TABLESIZE];

    for(i=0;i<TABLESIZE;i++){
        hashTable[i].indicator = EMPTY;
        hashTable[i].key = 0;
    }

    printf("============= Hash Table ============\n");
    printf("|1. Insert a key to the hash table  |\n");
    printf("|2. Delete a key from the hash table|\n");
    printf("|3. Print the hash table            |\n");
    printf("|4. Quit                            |\n");
    printf("=====================================\n");
    printf("Enter selection: ");
    scanf("%d",&opt);
    while(opt>=1 && opt <=3){
        switch(opt){
        case 1:
            printf("Enter a key to be inserted:\n");
            scanf("%d",&key);
            comparison = HashInsert(key,hashTable);
            if(comparison <0)
                printf("Duplicate key\n");
            else if(comparison < TABLESIZE)
                printf("Insert: %d Key Comparisons: %d\n",key, comparison);
            else
                printf("Key Comparisons: %d. Table is full.\n",comparison);
            break;
        case 2:
            printf("Enter a key to be deleted:\n");
            scanf("%d",&key);
            comparison = HashDelete(key,hashTable);
            if(comparison <0)
                printf("%d does not exist.\n", key);
            else if(comparison <= TABLESIZE)
                printf("Delete: %d Key Comparisons: %d\n",key, comparison);
            else
                printf("Error\n");
            break;
        case 3:
            for(i=0;i<TABLESIZE;i++) printf("%d: %d %c\n",i, hashTable[i].key,hashTable[i].indicator==DELETED?'*':' ');
            break;
        }
        printf("Enter selection: ");
        scanf("%d",&opt);
    }
    return 0;
}

int hash1(int key)
{
    return (key % TABLESIZE);
}

int hash2(int key)
{
    return (key % PRIME) + 1;
}

int HashInsert(int key, HashSlot hashTable[])
{
   int index = hash1(key);
   int incre = hash2(key);
   int dex2, slot;
   int size = 0;

   
   while(hashTable[index].indicator == USED){  
        if(hashTable[index].key == key) return -1;
        //key += incre;
        //index = hash1(key);
        size++; 
        index = hash1(index + incre);
        if(size >= TABLESIZE) return TABLESIZE;
   }
    if(hashTable[index].indicator!=EMPTY){
        dex2 = hash1(index+incre);
        slot = size+1;

        while(hashTable[dex2].indicator != EMPTY && size < TABLESIZE-1){
            
            if(hashTable[dex2].indicator == USED){
                size++;
                if(hashTable[dex2].key == key) return -1;
            }
            //key += incre;
            //index = hash1(key);
            slot++;
            if(size >= TABLESIZE) return TABLESIZE;
            dex2 = hash1(dex2 + incre);
            
        }
    }
    /*size++;
    index = hash1(index+incre);
    while(hashTable[index].indicator != EMPTY && size < TABLESIZE -1){
        if(hashTable[index].indicator == USED){
            if(hashTable[index].key == key) {
                size ++;
                return -1;
        }}
        size++;
        index = hash1(index+incre);
    }*/

    hashTable[index].indicator=USED;
    hashTable[index].key = key;
    return size; 
}


int HashDelete(int key, HashSlot hashTable[])
{
   //Write your code here
   int index = hash1(key);
   int incre = hash2(key);
   int initial = key;
   int size = 0;
   while(hashTable[index].indicator != EMPTY && size < TABLESIZE){
    if(hashTable[index].indicator == USED && hashTable[index].key==initial)
    { 
        hashTable[index].indicator=DELETED;
        return size +1 ;
    }
    
    /*if(hashTable[index].indicator == DELETED) {
        index = hash1(index + incre);
        continue;
    }*/
    size ++;
    key += incre;
    index = hash1(key);
    //if(size >= TABLESIZE) return -1;
   }
   return -1;
}
